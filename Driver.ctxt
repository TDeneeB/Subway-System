#BlueJ class context
comment0.target=Driver
comment1.params=
comment1.target=Driver()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ driver\n\ \n\ 1)\ creates\ the\ subway\ system\n\ 2)\ queries\ the\ user\ for\ what\ places\ they\ wish\ to\ visit\ and\ the\ station\ closest\ to\ them,\ creating\n\ their\ personal\ itinerary\n\ 3)\ finds\ the\ stations\ closest\ to\ those\ places\ they\ wish\ to\ visit\n\ 4)\ finds\ the\ shortest\ path\ (based\ on\ time)\ between\ all\ those\ things\ using\ the\ subway\ system\n\ 5)\ tells\ the\ user\ what\ places\ should\ be\ visited\ in\ what\ order\ (optional\ minimal\ paths)\n\ \ \ \n
comment2.params=
comment2.target=TStation\ getStartStation()
comment2.text=\n\ helper\ method\ to\ ask\ the\ user\ for\ the\ closest\ station\ to\ them\n\ \n\ @return\ the\ name\ of\ the\ closest\ station\ (not\ including\ the\ color\ if\ station\n\ is\ apart\ of\ multiple\ lines)\n
comment3.params=placesToVisit
comment3.target=java.util.ArrayList\ itineraryToStations(java.util.ArrayList)
comment3.text=\n\ takes\ the\ itinerary\ and\ turns\ it\ into\ TStations\ (nodes)\ that\ need\ to\ be\ visited\n\ while\ trasversing\ the\ subway\ system\ and\ travelling\ around\ Boston\n\ \n\ @param\ placesToVisit\ \ \ \ \ an\ ArrayList\ of\ Place\ objects\ that\ are\ in\ the\ user\ itinerary\ \n\ @return\ stationToVisit\ \ \ an\ ArrayList\ of\ TStation\ objects\ that\ are\ the\ closest\ to\ the\ Place\ objects\ in\ the\ user\ itinerary\ \n
comment4.params=paths\ startStation\ placesToVisit\ minPathLength
comment4.target=java.lang.String\ pathsToString(java.util.HashSet,\ TStation,\ java.util.ArrayList,\ java.lang.Integer)
comment4.text=\n\ Turns\ all\ the\ information\ about\ stations\ and\ paths\ into\ a\ string\ format\ to\ be\ printed\ to\ the\ user\n\ Tells\ the\ user\ all\ the\ possible\ paths\ that\ are\ equal\ to\ the\ minimum\ path\ length,\ all\ of\ which\ was\ found\ \n\ using\ Dijkstra's\ algorithm\ and\ how\ long\ it\ is\ estimated\ to\ take.\n\ \n\ @param\ paths\ \ \ \ \ \ \ \ \ \ \ \ \ a\ HashSet\ of\ Vectors\ that\ contain\ all\ the\ stations\ (in\ order\ of\ visitation)\ that\ are\ equal\ to\ the\ minimum\ path\ length\n\ \ \ \ \ \ \ \ startStation\ \ \ \ \ \ The\ closest\ TStation\ to\ the\ user,\ as\ indicated\ by\ the\ user\n\ \ \ \ \ \ \ \ placesToVisit\ \ \ \ \ an\ ArrayList\ of\ Place\ objects\ that\ are\ in\ the\ user\ itinerary\ \ \n\ \ \ \ \ \ \ \ minPathLength\ \ \ \ \ the\ time\ it\ is\ estimated\ that\ each\ minimum\ path\ will\ take\ on\ the\ subway\ station\n
comment5.params=args
comment5.target=void\ main(java.lang.String[])
comment5.text=\n\ Initialize\ everything\ and\ run\ the\ program\ to\ interact\ with\ the\ user\n
numComments=6
