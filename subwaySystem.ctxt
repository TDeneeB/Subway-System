#BlueJ class context
comment0.target=subwaySystem
comment1.params=fileName
comment1.target=subwaySystem(java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ subway_system.\ It\ calls\ the\ file\ which\ holds\ all\ the\ subway\ information\n\ and\ constructs\ the\ bidirectional\ adjacency\ list\ graph\ \n\ \n\ @param\ fileName\ \ \ \ \ \ the\ file\ containing\ all\ of\ the\ information\ of\ nodes\ to\ construct\ the\ graph\ from\n\ \n
comment2.params=stationsToVisit
comment2.target=java.util.ArrayList\ pathPermutations(java.util.List)
comment2.text=\n\ recursive\ helper\ method\ to\ find\ all\ the\ possible\ permutations\ of\ all\ the\ stations\ \n\ that\ need\ to\ visited.\ (representing\ order\ of\ travel)\n\ \n\ @param\ stationsToVisit\ \ \ \ \ \ \ all\ the\ stations\ that\ need\ to\ be\ visited\n\ \ \ \ \ \ \ \ newPermutation\ \ \ \ \ \ \ \ permutations\ on\ the\ current\ ordering\ (stack\ specific)\n
comment3.params=path\ pathLengths
comment3.target=int\ findPathLength(java.util.Vector,\ java.util.Hashtable)
comment3.text=\n\ commutively\ calculates\ and\ returns\ the\ sum\ of\ the\ transit\ time\ for\ a\ path\ \n\ \n\ @param\ path\ \ \ \ \ \ \ \ \ \ the\ path\ to\ be\ taken\ through\ the\ subway\ system\n\ \ \ \ \ \ \ \ pathLenghs\ \ \ \ a\ mapping\ between\ every\ TStation\ to\ another\ station\ for\ transit\ time\n
comment4.params=start
comment4.target=javafx.util.Pair\ dijkstra(TStation)
comment4.text=\n\ Finds\ all\ the\ minimum\ distances\ between\ a\ node\ and\ every\ other\ node\ in\ the\ graph\ (subway\ system).\ Uses\ a\ priority\ queue\ as\n\ is\ typical\ of\ dijksta's\ algorithm\n\n\ @param\ \ \ start\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ node\ from\ which\ to\ branch\ out\ from\ and\ find\ all\ the\ path\ lenghs\n\ @return\ distances,\ predecessors\ \ \ \ \ \ Distances\ contains\ all\ the\ distances\ from\ the\ start\ node\ to\ every\ other\ node\ in\ the\ graph\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ predecessors\ contains\ a\ mapping\ between\ the\ path\ from\ a\ node\ to\ another\ node\ (can\ be\ used\ to\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ trace\ the\ path\ from\ the\ start\ node\ to\ the\ end\ node\n
comment5.params=startStation\ stationsToVisit
comment5.target=javafx.util.Pair\ findShortestPath(TStation,\ java.util.ArrayList)
comment5.text=\n\ finds\ and\ returns\ a\ HashSet\ of\ all\ the\ shortest\ paths\ between\ desired\ stations\ in\ the\ represenation\ of\ the\ subway\ system\n\ Makes\ sure\ that\ the\ shortest\ paths\ start\ and\ end\ at\ the\ station\ closest\ to\ the\ user.\ Uses\ helper\ method\ of\ \n\ Dijktra's\ algorithm\ to\ do\ this.\ Precomputes\ all\ the\ possible\ paths.\ While\ this\ is\ not\ optimal\ \n\ and\ an\ NP\ hard\ problem,\ it\ is\ fine\ in\ this\ situatiuon\ since\ the\ number\ of\ places\ currently\ \n\ are\ very\ few\n\ \n\ @params\ startStation\ \ \ \ \ the\ closest\ staion\ to\ the\ user\n\ \ \ \ \ \ \ \ \ stationsToVisit\ \ the\ stations\ on\ the\ itinerary\ of\ the\ user\ (stations\ closest\ to\ the\ places\ the\ user\ would\ like\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ visit)\n\ @return\ minPaths,\ minPathLength\ \ \ \ \ \ a\ Pair\ containing\ all\ the\ path\ lengths\ that\ are\ equal\ to\ the\ minimum\ path\ length\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n
comment6.params=
comment6.target=WeightedAdjustListGraph\ getSubwaySystem()
comment6.text=\ \n\ getter\ method\n\ \n\ return\ representation\ \ \ \ the\ whole\ subway\ system\ represented\ using\ a\ WeightedAdjustListGraph\n
comment7.params=
comment7.target=java.util.Vector\ getStations()
comment7.text=\n\ getter\ method\n\ \n\ @return\ stations\ \ \ \ \ a\ Vector\ of\ all\ the\ stations\ in\ the\ subway\ system\n\ \n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ overriding\ the\ toString\ method\n\ \n\ @return\ representationString\ \ \ \ \ a\ redable\ version\ of\ the\ subway\ system\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ very\ simple\ data\ visulization\ check\n
numComments=10
